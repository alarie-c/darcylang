// Variables
x = 5
str = "Hello"

const PI = 3.14159
const VERSION as Int = 2

out x
out str
out PI

// Selection
if x > 5
    out "X is greater than 5"
elif x == 5
    out "X is 5"
else
    out "X is less than 5"
end

// Functions
func area <- height, width
    return height * width
end

my_area = area(5, 10)
out my_area

// Lists
my_list = [5, 10, 15, 20]
max = my_list.max()

out my_list
out max

my_list.append(25)

out my_list

// Vectors
my_vec = <5, 10>

magnitude = my_vec.magnitude()
normalized = my_vec.normalize()

out my_vec
out magnitude
out normalized

// Matricies
my_matrix = matrix
    [5, 10, 0]
    [6, 20, 0]
end

row1 = my_matrix[1]
out row1                    prints "5, 10, 0"

point = my_matrix[1, 2]
out point                   prints "10"

// Classes
class Rectangle
    width as Num
    height as Num
end

impl Rectangle
    func new <- p #perimeter
        return Rectangle()
            width as p[0]
            height as p[1]
        end
    end 

    method calculate_area
        area = self.width * self.height
        return area 
    end
end

my_rectangle = Rectangle:new(perimeter as (5, 10))
my_area = my_rectangle.calculate_area()

out my_rectangle
out my_area

// Enumerations
enum Utilities
    Gas with Num,
    Water with Num,
    Electric with Num,
end

impl Utilities
    method pay for *
        wallet.funds -= &this
    end
end

gas = Utilities:Gas(100)
water = Utilities:Water(100)
elec = Utilities:Electric(100)

gas.pay()
water.pay()
elec.pay()

out gas
out water
out elec

// Enumerations explanation:
Enumerations contain variants. Each variant can optionally have a field of a certain type (only 1 field).
You can implement methods and functions for each using the same syntax as classes.

Methods use "this" to refer to an enum rather than "self" like classes.
When declaring methods or functions for enums, specify which variants they are implemented for using "for __" and the
variant name. If the method/function is applied to all variants, use the wildcard operator `*`.

You can access an instance of an enum variant's field with the `&` 'field access' operator.


















